#suite test_truncate
#tcase truncate_case

#test truncate_fraction 
    s21_decimal value = defaultDecimal();
    s21_decimal result;
    value.bits[0] = 123456;  // Значение 123.456 при масштабе 3
    setPower(&value, 3);
    setSign(&value, 0);

    int status = s21_truncate(value, &result);
    ck_assert_int_eq(status, OK);
    ck_assert_int_eq(result.bits[0], 123);
    ck_assert_int_eq(result.bits[1], 0);
    ck_assert_int_eq(result.bits[2], 0);
    ck_assert_int_eq(result.bits[3], 0);

#test truncate_max_scale
    s21_decimal value = defaultDecimal();
    s21_decimal result;
    value.bits[0] = UINT_MAX;
    value.bits[1] = UINT_MAX;
    value.bits[2] = UINT_MAX;
    setPower(&value, 10);

    int status = s21_truncate(value, &result);
    ck_assert_int_eq(status, OK);
    ck_assert_uint_eq(result.bits[3], 0);


    unsigned int expected_bits0 = 1593240287; 
    unsigned int expected_bits1 = 1844674407; 
    unsigned int expected_bits2 = 0; 

    ck_assert_uint_eq(result.bits[0], expected_bits0);
    ck_assert_uint_eq(result.bits[1], expected_bits1);
    ck_assert_uint_eq(result.bits[2], expected_bits2);

#test truncate_zero_with_scale
// 0.000001
    s21_decimal value = defaultDecimal();
    s21_decimal result;
    value.bits[0] = 1;  
    setPower(&value, 6); 

    int status = s21_truncate(value, &result);
    ck_assert_int_eq(status, OK);
    ck_assert_uint_eq(result.bits[0], 0);
    ck_assert_uint_eq(result.bits[1], 0);
    ck_assert_uint_eq(result.bits[2], 0);
    ck_assert_uint_eq(result.bits[3], 0);  // Убедимся, что результат — точный ноль


#test s21_round_5   
 s21_decimal src1;
  src1.bits[0] = 0b01010101001110101110101110110001;
  src1.bits[1] = 0b00001101101101001101101001011111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000100100000000000000000;
  s21_decimal result;
  result.bits[0] = 0b00000000000000000000000000000001;
  result.bits[1] = 0b00000000000000000000000000000000;
  result.bits[2] = 0b00000000000000000000000000000000;
  result.bits[3] = 0b10000000000000000000000000000000;
  s21_decimal res_od;
  s21_round(src1, &res_od);
ck_assert_int_eq(res_od.bits[0], result.bits[0]);
ck_assert_int_eq(res_od.bits[1], result.bits[1]);
ck_assert_int_eq(res_od.bits[2], result.bits[2]);
ck_assert_int_eq(res_od.bits[3], result.bits[3]);


#test s21_round_6
  s21_decimal src1;
  src1.bits[0] = 0b10010111011100111001111111111111;
  src1.bits[1] = 0b00111100000010000011000110001101;
  src1.bits[2] = 0b00000000000000000000000000000001;
  src1.bits[3] = 0b10000000000001110000000000000000;
  s21_decimal res_od;
  s21_round(src1, &res_od);
  s21_decimal result;
  result.bits[3] = 0b10000000000000000000000000000000;
  result.bits[2] = 0;
  result.bits[1] = 0b00000000000000000000001000010010;
  result.bits[0] = 0b00110110101101101000110001000000;
ck_assert_int_eq(res_od.bits[0], result.bits[0]);
ck_assert_int_eq(res_od.bits[1], result.bits[1]);
ck_assert_int_eq(res_od.bits[2], result.bits[2]);
ck_assert_int_eq(res_od.bits[3], result.bits[3]);

#test s21_round_4
  s21_decimal value_1 = {{7444923, 0, 0, 0}};
  setSign(&value_1, 1);
  setPower(&value_1, 5);
  s21_decimal check = {{74, 0, 0, 0}};
  setSign(&check, 1);
  s21_decimal result;
  int return_value = s21_round(value_1, &result);
  ck_assert_int_eq(s21_is_equal(result, check), 1);
  ck_assert_int_eq(return_value, OK);



