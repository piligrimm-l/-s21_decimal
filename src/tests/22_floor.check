#suite test_floor
#tcase floor_case

#test floor_positive_integer
    s21_decimal value = defaultDecimal();
    value.bits[0] = 123;
    setPower(&value, 0);

    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);
    ck_assert_int_eq(result.bits[0], 123);


#test floor_positive_decimal
    s21_decimal value = defaultDecimal();
    value.bits[0] = 1235;  // Представление 123.5 при масштабе 1
    setPower(&value, 1);

    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);


#test floor_negative_integer
    s21_decimal value = defaultDecimal();
    value.bits[0] = 123;
    setPower(&value, 0);
    setSign(&value, 1);
    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);
    ck_assert_int_eq(result.bits[0], 123);
    ck_assert_int_eq(getSign(result), 1);


#test floor_negative_decimal
    s21_decimal value = defaultDecimal();
    value.bits[0] = 1235;  
    setPower(&value, 1);
    setSign(&value, 1);  

    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);
    ck_assert_int_eq(result.bits[0], 124);  
    ck_assert_int_eq(getSign(result), 1);

#test floor_large_decimal
    s21_decimal value = defaultDecimal();
    value.bits[0] = 1239999999; 
    setPower(&value, 9); // Представление 1.239999999

    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);
    ck_assert_int_eq(result.bits[0], 1); 
    ck_assert_int_eq((result.bits[3] & 0x00FF0000) >> 16, 0);


/*#test floor_large_negative_decimal
    s21_decimal value = defaultDecimal();
    unsigned long long full_value = 123999999999ULL;
    value.bits[0] = (unsigned int)(full_value % UINT_MAX);
    value.bits[1] = (unsigned int)(full_value / UINT_MAX);
    setPower(&value, 9);
    setSign(&value, 1);  

    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);
    ck_assert_int_eq(result.bits[0], 124); 
    ck_assert_int_eq(getSign(result), 1); */

#test floor_large_negative_decimal_2
    s21_decimal value = defaultDecimal();
    // Эмулируем -123.99999999 с масштабом 8
    value.bits[0] = 0b11100011000110001111101111111111;  
    value.bits[1] = 0b10;  
    setPower(&value, 8);
    setSign(&value, 1);  

    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);
    ck_assert_int_eq(result.bits[0], 124);  // Ожидаем, что результат будет -124
    ck_assert_int_eq(getSign(result), 1);

#test floor_power7_negative_decimal_3
    s21_decimal value = defaultDecimal();
    value.bits[0] = 1239999999;  
    setPower(&value, 7);
    setSign(&value, 1);  

    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);
    ck_assert_int_eq(result.bits[0], 124); 
    ck_assert_int_eq(getSign(result), 1);


#test floor_max_value
 s21_decimal value = defaultDecimal();
    value.bits[0] = 4294967295;
    value.bits[1] = 4294967295;
    value.bits[2] = 4294967295;
    setPower(&value, 0);  
    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);

    ck_assert_int_eq(result.bits[0], value.bits[0]);
    ck_assert_int_eq(result.bits[1], value.bits[1]);
    ck_assert_int_eq(result.bits[2], value.bits[2]);
    ck_assert_int_eq(result.bits[3], value.bits[3]);

#test floor_min_value
    // Входные данные с минимальным значением
    s21_decimal value = defaultDecimal();

    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);
    // Ожидаемый результат - тоже минимальное значение
    s21_decimal min_value = defaultDecimal();
    ck_assert_int_eq(s21_is_equal(result, min_value), 1);


#test floor_positive_decimal_2
    s21_decimal value = {{0, 0, 0, 0}};
    value.bits[0] = 12345;  // Представление 123.45 при масштабе 2
    setPower(&value, 2);
    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);
    ck_assert_int_eq(result.bits[0], 123);  // Округление вниз до 123
    ck_assert_int_eq(result.bits[3] & 0x80000000, 0); 
    ck_assert_int_eq((result.bits[3] & 0x00FF0000) >> 16, 0);

#test floor_negative_decimal_2
    s21_decimal value = {{0, 0, 0, 0}};
    value.bits[0] = 12345;  // Представление -123.45 при масштабе 2
    setPower(&value, 2);
    setSign(&value, 1);
    s21_decimal result;
    int status = s21_floor(value, &result);

    ck_assert_int_eq(status, OK);
    ck_assert_int_eq(result.bits[0], 124);  // Округление до -124
    ck_assert_int_eq(result.bits[3] & 0x80000000, 0x80000000); 


#test floor_simple_cases 
    struct {
        unsigned int initial_value; 
        int power;                  
        int expected_floor;         
        int initial_sign;           
    } test_cases[] = {
        {126, 1, 12, 0},
        {121, 1, 12, 0},
        {95, 1, 9, 0},
        {816, 2, 8, 0},
        {1, 1, 0, 0},
        {1, 1, -1, 1},
        {11, 1, -2, 1},
        {19, 1, -2, 1},
        {39, 1, -4, 1}
    };

    for (size_t i = 0; i < sizeof(test_cases)/sizeof(test_cases[0]); i++) {
        s21_decimal value = defaultDecimal();
        value.bits[0] = test_cases[i].initial_value;
        setPower(&value, test_cases[i].power);
        if (test_cases[i].initial_sign) setSign(&value, 1);

        s21_decimal result;
        int status = s21_floor(value, &result);

        ck_assert_int_eq(status, OK);
        ck_assert_int_eq(result.bits[0], (unsigned int)abs(test_cases[i].expected_floor));
        ck_assert_int_eq(getSign(result), test_cases[i].expected_floor < 0);
    }



