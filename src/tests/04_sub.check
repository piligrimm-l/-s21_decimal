#suite test_sub
#tcase s21_sub_case

#test s21_sub_1
//  вычитания двух десятичных чисел с разными масштабами, оба числа отрицательные.
  s21_decimal value_1 = {{13, 0, 0, 0}};
  setPower(&value_1, 1);
  setSign(&value_1, 1);
  s21_decimal value_2 = {{286, 0, 0, 0}};
  setPower(&value_2, 2);
  setSign(&value_2, 1);
  s21_decimal result;
  s21_decimal check = {{156, 0, 0, 0}};
  setPower(&check, 2);
  int return_value = s21_sub(value_1, value_2, &result);
  ck_assert_int_eq(s21_is_equal(result, check), 1);
  ck_assert_int_eq(return_value, OK);


#test s21_sub_2
// вычитания двух десятичных чисел, где первое число отрицательное.
  s21_decimal value_1 = {{13, 0, 0, 0}};
  setPower(&value_1, 1);
  setSign(&value_1, 1);
  s21_decimal value_2 = {{286, 0, 0, 0}};
  setPower(&value_2, 2);
  s21_decimal result;
  s21_decimal check = {{416, 0, 0, 0}};
  setPower(&check, 2);
  setSign(&check, 1);
  int return_value = s21_sub(value_1, value_2, &result);
  ck_assert_int_eq(s21_is_equal(result, check), 1);
  ck_assert_int_eq(return_value, OK);


#test s21_sub_3
// Тестирование вычитания, ведущего к андерфлоу (переполнению снизу).
  s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
  setSign(&value_1, 1);
  s21_decimal value_2 = {{2, 0, 0, 0}};
  s21_decimal result = defaultDecimal();
  //s21_decimal check = {{0, 0, 0, 0}};
  int return_value = s21_sub(value_1, value_2, &result);
  //admiralm: После переполнения не понятно что будет, поэтому мы орентируемся только на код ошибки
  //ck_assert_int_eq(s21_is_equal(result, check), 0);
  ck_assert_int_eq(return_value, EXCEEDING_THE_NEGATIVE_TYPE_LIMIT);


#test s21_sub_4
// но оба числа отрицательные.
  s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
  setSign(&value_1, 1);
  s21_decimal value_2 = {{2, 0, 0, 0}};
  setSign(&value_2, 1);
  s21_decimal result = defaultDecimal();
  s21_decimal check = {{0xFFFFFFFD, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
  setSign(&check, 1);
  int return_value = s21_sub(value_1, value_2, &result);
  ck_assert_int_eq(s21_is_equal(result, check), 1);
  ck_assert_int_eq(return_value, OK);


#test s21_sub_5
// вычитания двух чисел с существенной разницей в масштабах.
  s21_decimal value_1 = {{64071, 0, 0, 0}};
  setPower(&value_1, 4);
  //admiralm: это число больше, чем value_1 
  s21_decimal value_2 = {{5919, 0, 0, 0}};
  setPower(&value_2, 1);
  s21_decimal result = defaultDecimal();
  s21_decimal check = {{5854929, 0, 0, 0}};
  setPower(&check, 4);
  setSign(&check, 1);
  int return_value = s21_sub(value_1, value_2, &result);
  ck_assert_int_eq(s21_is_equal(result, check), 1);
  ck_assert_int_eq(return_value, OK);


#test s21_sub_6
// вычитания с использованием конвертации
  s21_decimal src1, src2;
  float a = -9403;
  float b = 202.098;
  float res_our_dec = 0.0;
  s21_from_float_to_decimal(a, &src1);
  s21_from_float_to_decimal(b, &src2);
  float res_origin = a - b;
  s21_decimal res_od;
  s21_sub(src1, src2, &res_od);
  s21_from_decimal_to_float(res_od, &res_our_dec);
  ck_assert_float_eq(res_our_dec, res_origin);


#test s21_sub_7
// битовой обработки и корректировки масштаба при вычитании.
  s21_decimal src1, src2;
  src1.bits[3] = 0b00000000000000010000000000000000;
  src1.bits[2] = 0;
  src1.bits[1] = 0;
  src1.bits[0] = 0b00000000000000000110011011110000;
  src2.bits[3] = 0b00000000000000110000000000000000;
  src2.bits[2] = 0;
  src2.bits[1] = 0;
  src2.bits[0] = 0b00000000000001000101000111010110;
  s21_decimal result_origin;
  result_origin.bits[3] = 0b00000000000000110000000000000000;
  result_origin.bits[2] = 0;
  result_origin.bits[1] = 0;
  result_origin.bits[0] = 0b00000000001000111110001111101010;
  s21_decimal result_our;
  s21_sub(src1, src2, &result_our);
  ck_assert_int_eq(result_origin.bits[3], result_our.bits[3]);
  ck_assert_int_eq(result_origin.bits[2], result_our.bits[2]);
  ck_assert_int_eq(result_origin.bits[1], result_our.bits[1]);
  ck_assert_int_eq(result_origin.bits[0], result_our.bits[0]);


